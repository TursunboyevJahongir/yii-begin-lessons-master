<?php

namespace app\controllers;

use app\models\NewsApiModel;
use http\Exception\InvalidArgumentException;
use Yii;
use app\models\NewsModel;
use yii\data\ActiveDataProvider;
use yii\helpers\Json;
use yii\rest\ActiveController;
use yii\web\Controller;
use yii\web\MethodNotAllowedHttpException;
use yii\web\NotAcceptableHttpException;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\web\UploadedFile;

/**
 * NewsController implements the CRUD actions for NewsModel model.
 */
class NewsController extends Controller
{
//    public $modelClass = '\app\models\NewsApiModel';

    public function beforeAction($action)
    {
        Yii::$app->controller->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all NewsModel models.
     * @return mixed
     */
    public function actionIndex()
    {
        $dataProvider = new ActiveDataProvider([
            'query' => NewsModel::find(),
        ]);

        return $this->render('index', [
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single NewsModel model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new NewsModel model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new NewsModel();
//
//        if ($model->load(Yii::$app->request->post()) && $model->save()) {
//            return $this->redirect(['view', 'id' => $model->id]);
//        }
        if($model->load(yii::$app->request->post())){
            $image=UploadedFile::getInstance($model,'image');
            $model->image=$image->name;
            $model->save();
            $image->saveAs(Yii::$app->basePath.'web/upload/'. $model->title);
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('create', [
            'model' => $model,
        ]);
    }

    /**
     * Updates an existing NewsModel model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing NewsModel model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the NewsModel model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return NewsModel the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = NewsModel::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }

    /**
     * @return array|\yii\db\ActiveRecord[]
     */
    public function actionGetNews()
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $models = NewsModel::find()->all();

        return $models;
    }

    /**
     * @param $id
     * @return array|false|string
     * @throws \yii\base\InvalidConfigException
     */
    public function actionApiDelete($id){
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        // agar son bo'lsa
        if(is_numeric($id)){
            // yangilikni o'chiramiz
           if(Yii::$app->request->isDelete){
               $model = NewsModel::findOne(['id' => $id]);
               if ($model !== null) {
                   $model->delete();
                   return ['result' => 'ok'];
               } else {
                   throw new NotFoundHttpException();
               }
           } else {
               throw new MethodNotAllowedHttpException();
           }
        }
    }
    public function actionApiUpdate($id) {
        //TODO: Exception statusini tekshirib moslash kk
        if (!is_numeric($id)) {
            throw new \yii\base\InvalidArgumentException();
        }
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        if (Yii::$app->request->isPut) {
            $model = new NewsApiModel();
            if ($model->load(Yii::$app->getRequest()->getBodyParams(), '') && $model->validate()) {
                $news = NewsModel::findOne(['id' => $id]);
                if ($news === null) {
                    throw new NotFoundHttpException('Jahongir');
                }

                $news->title = $model->title;
                $news->body = $model->body;
                $news->save();
                return ['status' => 'ok'];
            } else {
                return ['status' => 'error', 'messages' => $model->errors];
            }

        } else {
            $err = [
                'status' => 'error',
                'messages' => ['Xato']
            ];
            return json_encode($err, true);
        }
    }

}
